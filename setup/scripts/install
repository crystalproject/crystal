#!/bin/bash
#
# Deploy crystal installation
#
# Copyright (C) 2014 RUAG Defence, Patrick Haeusermann <patrick.haeusermann@ruag.com>
#
# This file is part of crystalproject
#
# crystalproject is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3 as published by
# the Free Software Foundation.
#
#
# crystalproject is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with crystalproject.  If not, see <http://www.gnu.org/licenses/>.

## GLOBAL VARS
BASE_DIR="${BASH_SOURCE[0]%/*/*}"

if [[ "${BASE_DIR}" == *$(basename "${0}")* ]]; then
  BASE_DIR="${PWD%/*}"
fi

## INCLUDES
source "${BASE_DIR}/includes/base.sh" 2>/dev/null
source "${BASE_DIR}/includes/user_interaction.sh" 2>/dev/null
source "${BASE_DIR}/includes/installation.sh" 2>/dev/null
source "${BASE_DIR}/includes/network_operation.sh" 2>/dev/null
source "${BASE_DIR}/includes/file_operation.sh" 2>/dev/null
source "${BASE_DIR}/includes/string_operation.sh" 2>/dev/null
source "${BASE_DIR}/includes/configuration.sh" 2>/dev/null
source "${BASE_DIR}/includes/hosts.sh" 2>/dev/null


if [[ ${?} -ne 0 ]]; then
  echo "Script inclusion failed. Please verify that all sources are available" >&2
  exit 1
fi

#source "${BASE_DIR}/includes/utils/user_interaction.sh" 2>/dev/null

# execution

## GENERAL
# check distribution
distribution

# execute script with higher privileges
(( EUID != 0 )) && exec sudo -- "$0" "$@"

install_ctrl() {
# check whether hostname is in hosts file
  check_local_hosts

# update package lists and upgrade packages (version conflict mitigation)
  apt-get update && apt-get upgrade

### OPENNEBULA
# install opennebula deps
  inst_apt "${BASE_DIR}/resources/pkglist/deps_opennebula"

# install opennebula
  inst_deb "${BASE_DIR}/packages/opennebula/ubuntu"

# configure opennebula
  put_root "${BASE_DIR}/resources/config/opennebula/root"

# setup oneadmin auth
  cp /var/lib/one/.ssh/id_rsa.pub /var/lib/one/.ssh/authorized_keys
  chown -R oneadmin:oneadmin /var/lib/one/.ssh
  chmod 600 /var/lib/one/.ssh/config

# actviate services
  update-rc.d opennebula defaults
  update-rc.d opennebula-sunstone defaults

# install necessary rubygems
  /usr/share/one/install_gems

#put_root "${BASE_DIR}/resources/config/openvswitch/root"
# activate services
  update-rc.d openvswitch-switch defaults

## NS3
  inst_apt "${BASE_DIR}/resources/pkglist/ns3"

# created from scripts/build
  put_root "${BASE_DIR}/resources/config/ns3"

#reload everything
  service openvswitch-switch restart
  service opennebula-gate restart
  service opennebula restart
  service opennebula-sunstone restart


### OPENVSWITCH

# install openvswitch
  inst_apt "${BASE_DIR}/resources/pkglist/openvswitch"

### CTR DEPS

  inst_apt "${BASE_DIR}/resources/pkglist/ctr"

  put_root "${BASE_DIR}/resources/config/ctr/root"

# get interface to bind openvswitch to
  local interfaces=($(get_intf))

  local chosen_interface=$(query_service_interface "${interfaces[@]}")



## finishing part

#bring openvswitch up

#backup ip addr
  backup_addr=$(get_ips "${chosen_interface}" 1 1)

  assemble_interfaces "${chosen_interface}" "${backup_addr}"

# prepare interface to be taken over by ovs and start it there
  ifdown --allow service-net "${chosen_interface}" ; ip addr flush dev "${chosen_interface}" ; ip link set "${chosen_interface}" down; ifup -a; ip link set "${chosen_interface}" up

# to be sure the ip address is set on the interface TODO:still needed?
  ip addr add "${backup_addr}" dev service-net

# add this host to the opennebula
  su -c "onedatastore update default ${BASE_DIR}/resources/config/opennebula/templates/default.ds; onehost create $(hostname) -i kvm -v kvm -n ovswitch" oneadmin

# print specs
  echo "you can login under:"
  echo

  for ip in $(get_ips); do
  echo "http://${ip}:9869"
  done

  credentials=($(cut -d':' --output-delimiter=' ' -f1,2 /var/lib/one/.one/one_auth))

  echo -e "\n\ncredentials:\n\nusername: ${credentials[0]}\npassword: ${credentials[1]}"

}


install_node() {
  # check whether hostname is in hosts file
  check_local_hosts

  # update package lists and upgrade packages (version conflict mitigation)
  apt-get update && apt-get upgrade

  ## NS3
  inst_apt "${BASE_DIR}/resources/pkglist/ns3"

  ### OPENNEBULA
  # install opennebula deps
  inst_apt "${BASE_DIR}/resources/pkglist/deps_opennebula_node"

  # install opennebula
  inst_deb "${BASE_DIR}"/packages/opennebula/ubuntu/opennebula-common_*_all.deb
  inst_deb "${BASE_DIR}"/packages/opennebula/ubuntu/opennebula-node_*_all.deb

  # copy pubkey
  local ctrl_host=$(get_ctrl)
  distribute_pubkey "${ctrl_host}"

  if [[ ${?} -ne 0 ]]; then
    echo "an error occured on public key distribution. please check that manually" >&2
  fi

  # created from scripts/build
  put_root "${BASE_DIR}/resources/config/ns3"

  #install openvswitch
  inst_apt "${BASE_DIR}/resources/pkglist/openvswitch"

### CTR DEPS

  inst_apt "${BASE_DIR}/resources/pkglist/ctr"

  put_root "${BASE_DIR}/resources/config/ctr/root"

  # get interface to bind openvswitch to
  local interfaces=($(get_intf))

  local chosen_interface=$(query_service_interface "${interfaces[@]}")

  local backup_addr=$(get_ips "${chosen_interface}" 1 1)

  assemble_interfaces "${chosen_interface}" "${backup_addr}"

   # prepare interface to be taken over by ovs and start it there
  ifdown --allow service-net "${chosen_interface}" ; ip addr flush dev "${chosen_interface}" ; ip link set "${chosen_interface}" down; ifup -a; ip link set "${chosen_interface}" up

  # to be sure the ip address is set on the interface TODO:still needed?
  ip addr add "${backup_addr}" dev service-net

}

## INTERFACES config

assemble_interfaces() {

  chosen_interface="${1}"

  backup_addr="${2}"

  #apply this to interfaces config
  replace "_INTERFACE_" "${chosen_interface}" "${BASE_DIR}/resources/config/openvswitch/templates/interfaces.append" "${BASE_DIR}/resources/config/openvswitch/root/etc/network/interfaces.append"

  sed "s/iface\ ${chosen_interface}/iface\ service-net/g" "/etc/network/interfaces" > "/tmp/interfaces"
  
  #add ovs-bridge options to service-net
  sed -i "/iface\ service-net/a \\ \tovs_type OVSBridge\n\tovs_ports ${chosen_interface}" "/tmp/interfaces"
  
  #move additional options to the right interface
  sed -n '1,/iface service-net/d;/auto\|iface/q; { /address\|netmask\|gateway\|dns\|ovs_type\|ovs_ports/!p }' "/tmp/interfaces" >> "/tmp/interfaces.append"
  
  #remove them from the wrong one
  sed -i '/iface\ service-net/,/auto\|iface/ { /iface\ service-net/b; /auto\|iface/b; /address\|netmask\|gateway\|dns\|ovs_type\|ovs_ports/!d }' "/tmp/interfaces"
  
  #append vswitch networks
  cat "${BASE_DIR}/resources/config/openvswitch/root/etc/network/interfaces.append" >> "/tmp/interfaces"
  
  #add (virt)device specific options
  cat "/tmp/interfaces.append" >> "/tmp/interfaces"

  # multipoint gre
  # TODO: global config option which sets the multicast address

  if [[ -n "${MPGREPREFIX}" && "${MPGREPREFIX}" != "none" ]]; then
    echo -e "auto mpgre\n" \
      "iface mpgre inet static\n" \
      "  address ${MPGREPREFIX%/*}\n" \
      "  netmask ${MPGREPREFIX##*/}\n" \
      "  mtu 8972\n" \
      "  pre-up ip tunnel add mpgre mode gre remote 224.133.7.1 local ${backup_addr%/*}\n" \
      "  up ip link set mpgre multicast on\n" \
      "  post-down ip link del mpgre" >> "/tmp/interfaces"
  fi  
 
  #ovs is now managing the underlying interface
  sed -i "/^auto ${chosen_interface}$/d" "/tmp/interfaces"
  
  approve_interfaces

  cp "/tmp/interfaces" "/etc/network/interfaces"
}

install_oplayer() {
  inst_apt "${BASE_DIR}/resources/pkglist/oplayer"

  dpkg-reconfigure -plow slapd

  # cfg ldap
  local SUFFIX="$(grep "^olcSuffix:" '/etc/ldap/slapd.d/cn=config/olcDatabase={1}hdb.ldif' | cut -d':' -f 2)"

  mkdir /tmp/structure/

  find "${BASE_DIR}/resources/config/oplayer/templates/structure" -type f -print0 | while read -d $'\0' file; do
    replace "__SUFFIX__" "${SUFFIX}" "${file}" "/tmp/structure/${file##*/}"
  done

  find "/tmp/structure" -type f -print0 | sort -z | while read -d $'\0' file; do
    ldapadd -c -Y EXTERNAL -H ldapi:/// -f "${file}"
  done

  # cfg dovecot
  replace "__SUFFIX__" "${SUFFIX}" "${BASE_DIR}/resources/config/oplayer/templates/dovecot/dovecot-ldap.conf.ext" "${BASE_DIR}/resources/config/oplayer/root/etc/dovecot/dovecot-ldap.conf.ext"

  # cfg postfix
  replace "__SUFFIX__" "${SUFFIX}" "${BASE_DIR}/resources/config/oplayer/templates/postfix/ldap-aliases.cf" "${BASE_DIR}/resources/config/oplayer/root/etc/postfix/ldap-aliases.cf"


  put_root "${BASE_DIR}/resources/config/oplayer/root"


  local netaddr=$(ipcalc -b -n ${PREFIX} | grep Network: | tr -s ' '| cut -d ' ' -f 2)

  postconf -e "inet_interfaces=localhost ${PREFIX%/*}"
  postconf -e "mynetworks = 127.0.0.0/8 [::ffff:127.0.0.0]/104 [::1]/128 ${netaddr}"

  groupadd -g 5000 vmail
  useradd -m -u 5000 -g 5000 -s /bin/bash vmail

  service slapd restart
  service dovecot restart
  service postfix restart
  service rsyslog restart
}

usage() {
  echo -e \
  "Usage: $(basename "${0}") TYPE HOSTNAME\n"
  exit 1
}

if [[ -n ${2} ]]; then
  HOST=${2}
  config_parse "${HOST}"
else
  usage
fi

case ${1} in
  ctrl)
    install_ctrl
    ;;

  node)
    install_node
    ;;
  oplayer)
    install_oplayer
    ;;

  *)
    usage
    ;;

esac

